---
import Layout from "../layouts/Layout.astro";
---

<Layout>
	<main>
		<div id="actions">
			<div id="path">
				<input type="text" id="path-input" />
				<button id="go-btn">Go</button>
			</div>
			<div class="toolbar">
				<button id="new-file-btn" title="New File">
					<span class="icon">📝</span>
					<p>New File</p>
				</button>
				<button id="new-folder-btn" title="New Folder">
					<span class="icon">🗂️</span>
					<p>New Folder</p>
				</button>
				<button id="delete-btn" title="Delete">
					<span class="icon">❌</span>
					<p>Delete</p>
				</button>
				<button id="rename-btn" title="Rename">
					<span class="icon">🔤</span>
					<p>Rename</p>
				</button>
				<button id="copy-btn" title="Copy">
					<span class="icon">📑</span>
					<p>Copy</p>
				</button>
				<button id="paste-btn" title="Paste">
					<span class="icon">📥</span>
					<p>Paste</p>
				</button>
				<button id="refresh-btn" title="Refresh">
					<span class="icon">🔄</span>
					<p>Refresh</p>
				</button>
				<button id="settings-btn" title="Settings">
					<span class="icon">⚙️</span>
					<p>Settings</p>
				</button>
			</div>
		</div>
		<nav>
			<ul>
				<li>📁 Home</li>
				<li>📁 Desktop</li>
				<li>📁 Documents</li>
				<li>📁 Downloads</li>
				<li>📁 Pictures</li>
				<li>📁 Videos</li>
				<hr />
				<li>
					<details>
						<summary>📁 Home</summary><ul>
							<li>📁 Videos</li>
							<li>📁 Videos</li>
							<li>
								<details>
									<summary>📁 Home</summary><ul>
										<li>📁 Videos</li>
										<li>📁 Videos</li>
									</ul>
								</details>
							</li>
						</ul>
					</details>
				</li>
			</ul>
		</nav>
		<div class="files-container">
			<!-- Added status and error message containers -->
			<div id="status-message"></div>
			<div id="error-message"></div>
			<ul id="file-list"></ul>
			<div id="selection-box"></div>
		</div>
		<div id="context-menu">
			<ul>
				<li id="cm-new-file">New File</li>
				<li id="cm-new-folder">New Folder</li>
				<li id="cm-delete">Delete</li>
				<li id="cm-copy">Copy</li>
				<li id="cm-paste">Paste</li>
				<li id="cm-rename">Rename</li>
				<li id="cm-refresh">Refresh</li>
			</ul>
		</div>
	</main>
</Layout>

<script>
	import {
		readDir,
		mkdir,
		create,
		remove,
		copyFile,
		BaseDirectory,
		rename,
		size,
	} from "@tauri-apps/plugin-fs";
	import * as path from "@tauri-apps/api/path";
	import { open } from "@tauri-apps/plugin-shell";
	import { load } from "@tauri-apps/plugin-store";
	import * as OTPAuth from "otpauth";

	let store = await load("file-manager");

	store.get("setupComplete").then((setupComplete) => {
		if (!setupComplete) {
			window.location.href = "/setup";
		}
	});

	async function verifyOTP() {
		const password = prompt("Enter your password");
		if (!password) return false;
		const code = prompt(
			"Enter the 6-digit code from your authenticator app",
		);
		if (!code) return false; // changed to return false instead of undefined

		const encryptedData = await store.get("encryptedSecret");
		if (!encryptedData) {
			alert("No encrypted secret found");
			return;
		}

		const { ciphertext, salt, iv } = encryptedData;

		const ciphertextArray = new Uint8Array(ciphertext);
		const saltArray = new Uint8Array(salt);
		const ivArray = new Uint8Array(iv);

		// Recreate the key material from the password
		const keyMaterial = await window.crypto.subtle.importKey(
			"raw",
			new TextEncoder().encode(password),
			"PBKDF2",
			false,
			["deriveBits", "deriveKey"],
		);

		// Derive the same encryption key using the stored salt
		const decryptionKey = await window.crypto.subtle.deriveKey(
			{
				name: "PBKDF2",
				salt: saltArray,
				iterations: 100000,
				hash: "SHA-256",
			},
			keyMaterial,
			{ name: "AES-GCM", length: 256 },
			false,
			["encrypt", "decrypt"],
		);

		// Decrypt the data
		const decryptedData = await window.crypto.subtle.decrypt(
			{
				name: "AES-GCM",
				iv: ivArray,
			},
			decryptionKey,
			ciphertextArray,
		);

		// Convert the decrypted data to a string
		const secretKey = new TextDecoder().decode(decryptedData);

		if (
			OTPAuth.TOTP.validate({
				secret: OTPAuth.Secret.fromBase32(secretKey),
				token: code,
				window: 1,
			}) !== null
		) {
			return true;
		} else {
			alert("Invalid code");
			return false;
		}
	}

	let files = [];
	let initialDir, currentWorkingDir;
	let isDragging = false,
		lastClickedIndex = null,
		ctrlPressed = false;
	let copiedFiles = [];

	async function buildDirList(dir) {
		let entries = [];
		try {
			entries = await readDir(dir, { baseDir: BaseDirectory.Home });
			document.getElementById("error-message").textContent = "";
		} catch (error) {
			console.error(error);
			document.getElementById("error-message").textContent =
				"Error reading directory: " + error.message;
		}
		files = entries.map((entry) => ({
			name: entry.name,
			isDirectory: entry.isDirectory,
			isFile: entry.isFile,
			isSymlink: entry.isSymlink,
		}));
		files.sort((a, b) => {
			if (a.isDirectory && !b.isDirectory) return -1;
			if (!a.isDirectory && b.isDirectory) return 1;
			return a.name.localeCompare(b.name);
		});
	}

	async function navigateTo(newDir) {
		let path_input = document.getElementById("path-input");
		path_input.value = newDir;
		currentWorkingDir = newDir;
		await buildDirList(currentWorkingDir);
		updateFileListUI();
		await updateFullDirectoryTree();
		highlightCurrentPath(newDir);
	}

	function updateFileListUI() {
		const fileList = document.getElementById("file-list");
		if (!fileList) return;
		fileList.innerHTML = "";
		const upItem = document.createElement("li");
		upItem.textContent = "..";
		upItem.style.cursor = "pointer";
		upItem.addEventListener("dblclick", async (e) => {
			e.preventDefault();
			if (!(await verifyOTP())) return;
			const parentDir = await path.dirname(currentWorkingDir);
			navigateTo(parentDir);
		});
		fileList.appendChild(upItem);
		files.forEach((file, index) => {
			const fileEntry = document.createElement("li");
			fileEntry.style.width = "100%";
			fileEntry.dataset.fileIndex = index;
			const checkbox = document.createElement("input");
			checkbox.type = "checkbox";
			checkbox.className = "file-checkbox";
			checkbox.style.marginRight = "8px";
			checkbox.addEventListener("change", () => {
				fileEntry.classList.toggle("selected", checkbox.checked);
				updateActionButtons();
			});
			fileEntry.prepend(checkbox);

			fileEntry.addEventListener("click", (e) => {
				if (e.target.matches("input.file-checkbox")) return;
				if (e.ctrlKey) {
					const isSelected = fileEntry.classList.toggle("selected");
					checkbox.checked = isSelected;
					lastClickedIndex = index;
				} else if (e.shiftKey) {
					if (lastClickedIndex === null) {
						lastClickedIndex = index;
						fileEntry.classList.add("selected");
						checkbox.checked = true;
					} else {
						let start = Math.min(lastClickedIndex, index);
						let end = Math.max(lastClickedIndex, index);
						document
							.querySelectorAll("#file-list li[data-file-index]")
							.forEach((li) => {
								const liIndex = parseInt(li.dataset.fileIndex);
								const box = li.querySelector(
									"input.file-checkbox",
								);
								if (liIndex >= start && liIndex <= end) {
									li.classList.add("selected");
									if (box) box.checked = true;
								}
							});
					}
				} else {
					// Deselect all files first
					document
						.querySelectorAll("#file-list li.selected")
						.forEach((li) => {
							li.classList.remove("selected");
							const cb = li.querySelector("input.file-checkbox");
							if (cb) cb.checked = false;
						});

					// Then select the clicked file
					fileEntry.classList.add("selected");
					checkbox.checked = true;
					lastClickedIndex = index;
				}
				updateActionButtons();
			});

			fileEntry.addEventListener("contextmenu", (e) => {
				e.stopPropagation();
				showContextMenu(e);
			});

			if (file.isDirectory) {
				const iconSpan = document.createElement("span");
				iconSpan.className = "icon";
				iconSpan.textContent = "📁";
				fileEntry.appendChild(iconSpan);
				const nameSpan = document.createElement("span");
				nameSpan.className = "name";
				nameSpan.textContent = " " + file.name;
				fileEntry.appendChild(nameSpan);
				fileEntry.style.cursor = "pointer";
				fileEntry.addEventListener("dblclick", async (e) => {
					e.preventDefault();
					if (!(await verifyOTP())) return;
					path.join(currentWorkingDir, file.name).then((newPath) =>
						navigateTo(newPath),
					);
				});
			} else {
				const iconSpan = document.createElement("span");
				iconSpan.className = "icon";
				iconSpan.textContent = file.isFile
					? "📄"
					: file.isSymlink
						? "🔗"
						: "";
				fileEntry.appendChild(iconSpan);
				const nameSpan = document.createElement("span");
				nameSpan.className = "name";
				nameSpan.textContent = " " + file.name;
				nameSpan.title = file.name;
				fileEntry.appendChild(nameSpan);

				path.join(currentWorkingDir, file.name).then((filePath) => {
					size(filePath).then((size) => {
						nameSpan.textContent += ` (${size} bytes)`;
					});
				});

				if (file.isFile) {
					fileEntry.style.cursor = "pointer";
					fileEntry.addEventListener("dblclick", async (e) => {
						e.preventDefault();
						if (!(await verifyOTP())) return;
						try {
							const filePath = await path.join(
								currentWorkingDir,
								file.name,
							);
							await open(filePath);
							document.getElementById(
								"status-message",
							).textContent = `Opening: ${file.name}`;
							setTimeout(
								() =>
									(document.getElementById(
										"status-message",
									).textContent = ""),
								3000,
							);
						} catch (error) {
							console.error("Failed to open file:", error);
							document.getElementById(
								"error-message",
							).textContent =
								`Error opening file: ${error.message}`;
						}
					});
				}
			}
			fileList.appendChild(fileEntry);
		});
	}

	document.getElementById("go-btn").addEventListener("click", async () => {
		if (!(await verifyOTP())) return;
		const newPath = document.getElementById("path-input").value;
		await navigateTo(newPath);
	});

	document
		.getElementById("path-input")
		.addEventListener("keydown", async (e) => {
			if (e.key === "Enter") {
				if (!(await verifyOTP())) return;
				const newPath = document.getElementById("path-input").value;
				await navigateTo(newPath);
			}
		});

	(async () => {
		initialDir = await path.homeDir();
		currentWorkingDir = initialDir;
		await navigateTo(initialDir);
		updateActionButtons();
		// setupNavigation();
		// updateNavigation();
		// addBookmarkButton();
	})();

	let selectionBox = document.getElementById("selection-box");
	let startX,
		startY,
		isSelecting = false;
	document.querySelector("main").addEventListener("mousedown", (e) => {
		// Skip selection if clicking on toolbar or context menu
		if (e.target.closest("#actions") || e.target.closest("#context-menu"))
			return;
		if (e.button === 2 || e.target.closest("input.file-checkbox")) return;
		e.stopPropagation();
		e.preventDefault();

		ctrlPressed = e.ctrlKey;

		if (!ctrlPressed) {
			document.querySelectorAll("#file-list li").forEach((li) => {
				const checkbox = li.querySelector("input.file-checkbox");
				if (checkbox) checkbox.checked = false;
				li.classList.remove("selected");
			});
		}

		// Calculate coordinates relative to main element
		const main = document.querySelector("main");
		const mainRect = main.getBoundingClientRect();
		isSelecting = true;
		startX = e.clientX - mainRect.left;
		startY = e.clientY - mainRect.top;
		selectionBox.style.left = startX + "px";
		selectionBox.style.top = startY + "px";
		selectionBox.style.width = "0px";
		selectionBox.style.height = "0px";
		selectionBox.style.display = "block";
	});

	document.addEventListener("mousemove", (e) => {
		if (!isSelecting) return;
		// Get main element for coordinate reference
		const main = document.querySelector("main");
		const mainRect = main.getBoundingClientRect();
		// Use client coordinates relative to the main element
		const currentX = e.clientX - mainRect.left;
		const currentY = e.clientY - mainRect.top;
		const rectX = Math.min(startX, currentX);
		const rectY = Math.min(startY, currentY);
		selectionBox.style.left = rectX + "px";
		selectionBox.style.top = rectY + "px";
		selectionBox.style.width = Math.abs(startX - currentX) + "px";
		selectionBox.style.height = Math.abs(startY - currentY) + "px";
		const selRect = selectionBox.getBoundingClientRect();
		document.querySelectorAll("#file-list li").forEach((li) => {
			const liRect = li.getBoundingClientRect();
			li.classList.toggle(
				"selecting",
				!(
					liRect.left > selRect.right ||
					liRect.right < selRect.left ||
					liRect.top > selRect.bottom ||
					liRect.bottom < selRect.top
				),
			);
		});
	});

	// Consolidated mouseup handler
	document.addEventListener("mouseup", (e) => {
		isDragging = false;
		if (!isSelecting) return;
		isSelecting = false;
		selectionBox.style.display = "none";

		// Selection finalization code
		const wasBoxSelecting =
			document.querySelectorAll("#file-list li.selecting").length > 0;
		document.querySelectorAll("#file-list li").forEach((li) => {
			if (li.classList.contains("selecting")) {
				const checkbox = li.querySelector("input.file-checkbox");
				if (checkbox) {
					checkbox.checked = true;
					li.classList.add("selected");
				}
				li.classList.remove("selecting");
			} else if (wasBoxSelecting && !ctrlPressed) {
				// Only deselect non-selected items if Ctrl wasn't pressed
				const checkbox = li.querySelector("input.file-checkbox");
				if (checkbox) checkbox.checked = false;
				li.classList.remove("selected");
			}
		});
		updateActionButtons();
	});

	function updateActionButtons() {
		const renameBtn = document.getElementById("rename-btn");
		const selectedCount = document.querySelectorAll(
			"#file-list li.selected",
		).length;
		renameBtn.disabled = selectedCount !== 1;
		renameBtn.style.opacity = selectedCount === 1 ? 1 : 0.5;

		const deleteBtn = document.getElementById("delete-btn");
		deleteBtn.disabled = selectedCount === 0;
		deleteBtn.style.opacity = selectedCount > 0 ? 1 : 0.5;

		const copyBtn = document.getElementById("copy-btn");
		copyBtn.disabled = selectedCount === 0;
		copyBtn.style.opacity = selectedCount > 0 ? 1 : 0.5;

		const pasteBtn = document.getElementById("paste-btn");
		pasteBtn.disabled = copiedFiles.length === 0;
		pasteBtn.style.opacity = copiedFiles.length > 0 ? 1 : 0.5;
	}

	async function handleNewFile() {
		if (!(await verifyOTP())) return;
		const newName = prompt("Enter new file name:");
		if (!newName) return;
		if (newName) {
			await create(await path.join(currentWorkingDir, newName), {
				baseDir: BaseDirectory.Home,
			});
			await navigateTo(currentWorkingDir);
		} else {
			alert("Please enter a valid file name.");
		}
	}

	async function handleNewFolder() {
		if (!(await verifyOTP())) return;
		const newName = prompt("Enter new folder name:");
		if (newName) {
			await mkdir(await path.join(currentWorkingDir, newName));
			await navigateTo(currentWorkingDir);
		}
	}

	async function handleRename() {
		if (!(await verifyOTP())) return;
		const selected = document.querySelectorAll("#file-list li.selected");
		console.log("Rename - Selected items:", selected.length);
		if (selected.length !== 1) return;
		console.log("Showing rename prompt");
		const oldName = selected[0].querySelector(".name").textContent.trim();
		const newName = prompt("Enter new name:", oldName);
		if (newName && newName !== oldName) {
			const oldPath = await path.join(currentWorkingDir, oldName);
			const newPath = await path.join(currentWorkingDir, newName);
			await rename(oldPath, newPath);
			await navigateTo(currentWorkingDir);
		}
	}

	async function handleDelete() {
		if (!(await verifyOTP())) return;
		const selected = document.querySelectorAll("#file-list li.selected");
		console.log("Delete - Selected items:", selected.length);
		if (selected.length === 0) return;
		console.log("Showing delete confirmation");
		if (confirm(`Delete ${selected.length} item(s)?`)) {
			for (const li of selected) {
				const name = li.querySelector(".name").textContent.trim();
				await remove(await path.join(currentWorkingDir, name), {
					recursive: true,
				});
			}
			await navigateTo(currentWorkingDir);
		}
	}

	async function handleCopy() {
		if (!(await verifyOTP())) return;
		copiedFiles = [];
		const selectedItems = document.querySelectorAll(
			"#file-list li.selected",
		);
		for (const li of selectedItems) {
			const name = li.querySelector(".name").textContent.trim();
			const fullPath = await path.join(currentWorkingDir, name);
			copiedFiles.push(fullPath);
		}
		document.getElementById("status-message").textContent =
			`${copiedFiles.length} file(s) copied to clipboard.`;
		setTimeout(
			() => (document.getElementById("status-message").textContent = ""),
			3000,
		);
	}

	async function handlePaste() {
		if (!(await verifyOTP())) return;
		for (const file of copiedFiles) {
			const name = await path.basename(file);
			const targetPath = await path.join(currentWorkingDir, name);
			await copyFile(file, targetPath);
		}
		await navigateTo(currentWorkingDir);
		document.getElementById("status-message").textContent =
			`${copiedFiles.length} file(s) pasted.`;
		setTimeout(
			() => (document.getElementById("status-message").textContent = ""),
			3000,
		);
	}

	async function handleRefresh() {
		if (!(await verifyOTP())) return;
		await navigateTo(currentWorkingDir);
	}

	async function gotoSettings() {
		if (!(await verifyOTP())) return;
		window.location.href = "/settings";
	}

	document
		.getElementById("new-file-btn")
		?.addEventListener("click", handleNewFile);
	document
		.getElementById("new-folder-btn")
		?.addEventListener("click", handleNewFolder);
	document
		.getElementById("delete-btn")
		?.addEventListener("click", handleDelete);
	document
		.getElementById("rename-btn")
		?.addEventListener("click", handleRename);
	document.getElementById("copy-btn")?.addEventListener("click", handleCopy);
	document
		.getElementById("paste-btn")
		?.addEventListener("click", handlePaste);
	document
		.getElementById("refresh-btn")
		?.addEventListener("click", handleRefresh);
	document
		.getElementById("settings-btn")
		?.addEventListener("click", gotoSettings);

	document
		.getElementById("cm-new-file")
		?.addEventListener("click", handleNewFile);
	document
		.getElementById("cm-new-folder")
		?.addEventListener("click", handleNewFolder);
	document
		.getElementById("cm-delete")
		?.addEventListener("click", handleDelete);
	document
		.getElementById("cm-rename")
		?.addEventListener("click", handleRename);
	document.getElementById("cm-copy")?.addEventListener("click", handleCopy);
	document.getElementById("cm-paste")?.addEventListener("click", handlePaste);
	document
		.getElementById("cm-refresh")
		?.addEventListener("click", handleRefresh);

	function showContextMenu(e) {
		e.preventDefault();
		const menu = document.getElementById("context-menu");
		if (!menu) return;
		menu.style.display = "block";
		const main = document.querySelector("main");
		if (!main) return;
		const mainRect = main.getBoundingClientRect();
		const availableWidth = Math.min(
			main.clientWidth,
			window.innerWidth - mainRect.left,
		);
		const availableHeight = Math.min(
			main.clientHeight,
			window.innerHeight - mainRect.top,
		);
		let posX = e.clientX - mainRect.left;
		let posY = e.clientY - mainRect.top;
		const menuRect = menu.getBoundingClientRect();
		if (posX + menuRect.width > availableWidth)
			posX = availableWidth - menuRect.width;
		if (posY + menuRect.height > availableHeight)
			posY = availableHeight - menuRect.height;
		menu.style.left = Math.max(posX, 0) + "px";
		menu.style.top = Math.max(posY, 0) + "px";
	}

	function hideContextMenu() {
		document.getElementById("context-menu").style.display = "none";
	}

	document.addEventListener("contextmenu", (e) => {
		if (
			e.target.closest("#file-list") ||
			e.target.closest("#actions") ||
			e.target.closest("main")
		) {
			showContextMenu(e);
		} else {
			hideContextMenu();
		}
	});

	document.addEventListener("click", () => {
		hideContextMenu();
	});

	async function highlightCurrentPath(currentPath) {
		// Remove highlight from all items
		document.querySelectorAll("nav li").forEach((item) => {
			item.classList.remove("active");
		});
	}

	let visitedDirs = [];

	async function buildDirectoryTree(
		rootDir,
		currentPath,
		maxDepth = 2,
		currentDepth = 0,
		expanded = false,
	) {
		try {
			const entries = await readDir(rootDir, {
				baseDir: BaseDirectory.Home,
			});
			const dirEntries = entries.filter((entry) => entry.isDirectory);

			if (dirEntries.length === 0) return null; // No subdirectories

			const ul = document.createElement("ul");

			for (const entry of dirEntries) {
				const fullPath = await path.join(rootDir, entry.name);
				const isInPath = currentPath.startsWith(fullPath);

				if (visitedDirs.includes(fullPath)) continue;
				visitedDirs.push(fullPath);

				// Create list item for directory
				const li = document.createElement("li");
				li.style.cursor = "pointer";

				try {
					// Check if this directory contains subdirectories
					const subEntries = await readDir(fullPath, {
						baseDir: BaseDirectory.Home,
					});
					const hasSubDirs = subEntries.some(
						(subEntry) => subEntry.isDirectory,
					);

					if (hasSubDirs) {
						// Create expandable section
						const details = document.createElement("details");
						details.open = isInPath || expanded;

						const summary = document.createElement("summary");
						summary.textContent = "📁 "; // Just show the arrow and icon
						details.appendChild(summary);

						// Create a separate element for the directory name
						const dirNameSpan = document.createElement("span");
						dirNameSpan.textContent = entry.name;
						dirNameSpan.style.cursor = "pointer";
						dirNameSpan.className = "dir-name";
						summary.appendChild(dirNameSpan);

						// Add click handler only to the directory name
						dirNameSpan.addEventListener("click", async (e) => {
							e.preventDefault(); // Prevent details toggle
							e.stopPropagation(); // Prevent event from bubbling up

							if (!(await verifyOTP())) return;
							await navigateTo(fullPath);
						});

						// Create lazy-loading mechanism
						let loaded = false;
						let subTree = null;

						details.addEventListener("toggle", async () => {
							if (details.open && !loaded) {
								// Load subdirectories when expanded
								subTree = await buildDirectoryTree(
									fullPath,
									currentPath,
									maxDepth,
									currentDepth + 1,
									false,
								);

								if (subTree) {
									details.appendChild(subTree);
									loaded = true;
								}
							}
						});

						// If this is in the current path, pre-load its children
						if (isInPath) {
							subTree = await buildDirectoryTree(
								fullPath,
								currentPath,
								maxDepth,
								currentDepth + 1,
								false,
							);

							if (subTree) {
								details.appendChild(subTree);
								loaded = true;
							}
						}

						li.appendChild(details);
					} else {
						// End branch (no subdirectories)
						li.textContent = `📄 ${entry.name}`;
					}

					// Highlight if in current path
					if (isInPath) {
						li.classList.add("active");
					}

					// Add click handler
					li.addEventListener("click", async (e) => {
						// Prevent click from triggering details toggle
						if (e.target.tagName.toLowerCase() === "summary") {
							e.stopPropagation();
							return;
						}

						if (!(await verifyOTP())) return;
						await navigateTo(fullPath);
					});

					ul.appendChild(li);
				} catch (err) {
					console.error(
						`Error processing directory ${entry.name}:`,
						err,
					);
				}
			}

			return ul;
		} catch (error) {
			console.error("Error building directory tree:", error);
			return null;
		}
	}

	async function updateFullDirectoryTree() {
		const navContainer = document.querySelector("nav");
		const rootPath = await path.resolve("/");

		// Clear existing navigation
		navContainer.innerHTML = "";

		visitedDirs = [];

		// Add common directories first
		const commonDirsUl = document.createElement("ul");
		commonDirsUl.classList.add("common-dirs");
		const commonDirs = [
			{ name: "Home", path: initialDir },
			{ name: "Desktop", path: await path.join(initialDir, "Desktop") },
			{
				name: "Documents",
				path: await path.join(initialDir, "Documents"),
			},
			{
				name: "Downloads",
				path: await path.join(initialDir, "Downloads"),
			},
			{ name: "Pictures", path: await path.join(initialDir, "Pictures") },
			{ name: "Videos", path: await path.join(initialDir, "Videos") },
		];

		commonDirs.forEach((dir, index) => {
			const li = document.createElement("li");
			li.textContent = `📁 ${dir.name}`;
			li.style.cursor = "pointer";
			if (currentWorkingDir === dir.path) {
				li.classList.add("active");
			}
			li.addEventListener("click", async () => {
				if (!(await verifyOTP())) return;
				await navigateTo(dir.path);
			});
			commonDirsUl.appendChild(li);
		});

		navContainer.appendChild(commonDirsUl);

		// Add separator
		const separator = document.createElement("hr");
		navContainer.appendChild(separator);

		// Add dynamic file tree
		const fileTree = await buildDirectoryTree(
			rootPath,
			currentWorkingDir,
			10,
		);
		if (fileTree) {
			navContainer.appendChild(fileTree);
		}
	}
</script>

<style is:global>
	main {
		display: flex;
		flex-direction: row;
		overflow: hidden;
	}
	#selection-box {
		border: 1px dashed #666;
		background-color: rgba(173, 216, 230, 0.3);
		pointer-events: none;
		z-index: 99;
		position: absolute;
		display: none;
	}
	#context-menu {
		display: none;
		position: absolute;
		padding: 5px;
		z-index: 2000;
		background: #333036;
		border: 1px solid #222024;
		border-radius: 5px;
	}
	#file-list {
		list-style: none;
		padding: 0;
		margin: 0;
		margin-top: 3em;
		margin-left: 1.5em;
	}
	#file-list li {
		display: flex;
		align-items: center;
	}
	#file-list li:hover,
	#file-list li.selecting {
		background-color: #49454D;
	}
	#file-list li.selected {
		background-color: #107bb559;
	}
	#file-list .icon {
		margin-right: 8px;
	}
	#actions {
		position: fixed;
		left: 0;
		width: 100%;
		z-index: 3000;
		background-color: #2b292e;
		display: flex;
		flex-direction: column;
		align-items: left;
	}
	#actions .toolbar {
		display: flex;
		flex-direction: row;
		gap: 0.5em;
		margin-top: 0.4em;
		margin-bottom: 0.4em;
	}
	#actions .toolbar button {
		color: white;
		background-color: #333036;
		border: none;
		cursor: pointer;
		display: flex;
		border: 1px solid #222024;
		padding: 0.5em;
		box-shadow: none;
		padding: none;
		border-radius: 5px;
		flex-direction: column;
		align-items: center;
		height: 70px;
	}
	#actions .toolbar button:hover {
		background-color: #dcdcdc;
	}
	#actions .toolbar button:disabled {
		background-color: #f0f0f018;
	}
	#actions .toolbar button:disabled:hover {
		background-color: #f0f0f0;
	}
	#actions .toolbar button .icon {
		font-size: 1.5em;
	}
	#actions .toolbar button p {
		margin: 0;
		font-size: 0.8em;
	}
	#path {
		display: flex;
		align-items: center;
		padding: 0;
		width: 100%;
		gap: 1em;
	}
	#path-input {
		flex: 1;
		border: none;
		border-radius: 4px;
		padding: 0.5em;
		font-size: 1em;
	}
	nav {
		position: fixed;
		top: 7em;
		bottom: 0;
		left: 0;
		width: 200px;
		max-width: 200px;
		padding: 1rem;
		overflow-y: auto;
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		justify-content: flex-start;
	}
	nav hr {
		border: 0;
		border-top: 1px solid #222024;
		width: 150px;
	}
	.files-container {
		margin-left: 200px;
		overflow-y: auto;
		height: 100vh;
	}
	nav ul {
		margin: 0;
		padding: 0 0 0 1.5rem;
		list-style: none;
	}
	nav ul:first-child {
		padding: 0 0 0 0.5rem;
	}
	nav summary {
		margin-left: -1.05rem;
	}
	.files-container {
		margin-top: 4em;
		flex: 1;
		overflow-y: auto;
		padding: 1rem;
		height: 100%;
	}
	#context-menu {
		background: #333036;
		border: 1px solid #222024;
		border-radius: 5px;
		z-index: 10000;
	}
	#context-menu ul {
		list-style: none;
		margin: 0;
		padding: 0;
	}
	#context-menu ul li {
		padding: 0.5em 1em;
		cursor: pointer;
		white-space: nowrap;
		border-radius: 5px;
	}
	#context-menu ul li:hover {
		background-color: #2b292e;
	}

	.dir-name {
		margin-left: 4px;
	}

	.dir-name:hover {
		text-decoration: underline;
	}
</style>
