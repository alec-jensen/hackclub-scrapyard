---
import Layout from "../layouts/Layout.astro";
---

<Layout>
	<main style="position: relative;">
		<ul id="file-list"></ul>
		<!-- New selection box element -->
		<div id="selection-box" style="display: none; position: absolute;"></div>
	</main>
</Layout>

<script>
	import { readDir, BaseDirectory } from "@tauri-apps/plugin-fs";
	import * as path from "@tauri-apps/api/path";

	let files = [];
	
	let initialDir;
	let currentWorkingDir;

	// Global variables for drag multiselect
	let isDragging = false;
	let dragInitialState = false;
	let lastClickedIndex = null; // new
	
	// End drag on mouseup globally
	document.addEventListener("mouseup", () => {
		isDragging = false;
	});

	async function buildDirList(dir) {
		let entries = [];
		try {
			entries = await readDir(dir, { baseDir: BaseDirectory.Home });
		} catch (error) {
			console.error(error);
			alert(`Error reading directory: ${error}`);
			entries = [];
		}

		files = [];

		entries.forEach((entry) => {
			files.push({
				name: entry.name,
				isDirectory: entry.isDirectory,
				isFile: entry.isFile,
				isSymlink: entry.isSymlink,
			});
		});

		files.sort((a, b) => {
			if (a.isDirectory && !b.isDirectory) {
				return -1;
			} else if (!a.isDirectory && b.isDirectory) {
				return 1;
			} else {
				return a.name.localeCompare(b.name);
			}
		});
	}

	async function navigateTo(newDir) {
		currentWorkingDir = newDir;
		await buildDirList(currentWorkingDir);
		updateFileListUI();
	}

	function updateFileListUI() {
		const fileList = document.getElementById("file-list");
		// Clear the list
		fileList.innerHTML = "";

		// Up directory item as a full-width, double-clickable <li>
		const upItem = document.createElement("li");
		upItem.textContent = "..";
		upItem.style.cursor = "pointer";
		upItem.addEventListener("dblclick", async (e) => {
			e.preventDefault();
			const parentDir = await path.dirname(currentWorkingDir);
			navigateTo(parentDir);
		});
		fileList.appendChild(upItem);

		files.forEach((file, index) => {
			const fileEntry = document.createElement("li");
			fileEntry.style.width = "100%";
			fileEntry.dataset.fileIndex = index;  // assign index

			// Add checkbox for selection
			const checkbox = document.createElement("input");
			checkbox.type = "checkbox";
			checkbox.className = "file-checkbox";
			checkbox.style.marginRight = "8px";
			checkbox.addEventListener("change", () => {
				fileEntry.classList.toggle("selected", checkbox.checked);
			});
			fileEntry.appendChild(checkbox);

			 // Remove or comment out the old drag multi-select code attached to fileEntry
			// fileEntry.addEventListener("mousedown", ...)
			// fileEntry.addEventListener("mouseenter", ...)

			// New click event behavior for selecting
			fileEntry.addEventListener("click", (e) => {
				if (e.target.matches("input.file-checkbox")) return;
				if (e.ctrlKey) {
					// Toggle clicked entry without clearing others
					const isSelected = fileEntry.classList.toggle("selected");
					checkbox.checked = isSelected;
					lastClickedIndex = index;
				} else if (e.shiftKey) {
					// Range selection
					if (lastClickedIndex === null) {
						lastClickedIndex = index;
						fileEntry.classList.add("selected");
						checkbox.checked = true;
					} else {
						let start = Math.min(lastClickedIndex, index);
						let end = Math.max(lastClickedIndex, index);
						document.querySelectorAll("#file-list li[data-file-index]").forEach(li => {
							const liIndex = parseInt(li.dataset.fileIndex);
							const box = li.querySelector("input.file-checkbox");
							if (liIndex >= start && liIndex <= end) {
								li.classList.add("selected");
								if (box) box.checked = true;
							}
						});
					}
				} else {
					// Single click clears other selections and selects only this entry
					document.querySelectorAll("#file-list li.selected").forEach(li => {
						li.classList.remove("selected");
						const box = li.querySelector("input.file-checkbox");
						if (box) box.checked = false;
					});
					fileEntry.classList.add("selected");
					checkbox.checked = true;
					lastClickedIndex = index;
				}
			});

			if (file.isDirectory) {
				// Create icon and name spans
				const iconSpan = document.createElement("span");
				iconSpan.className = "icon";
				iconSpan.textContent = "📁";
				fileEntry.appendChild(iconSpan);

				const nameSpan = document.createElement("span");
				nameSpan.className = "name";
				nameSpan.textContent = " " + file.name;
				fileEntry.appendChild(nameSpan);

				fileEntry.style.cursor = "pointer";
				fileEntry.addEventListener("dblclick", (e) => {
					e.preventDefault();
					path.join(currentWorkingDir, file.name).then(newPath => {
						navigateTo(newPath);
					});
				});
			} else {
					// For files and symlinks
				const iconSpan = document.createElement("span");
				iconSpan.className = "icon";
				iconSpan.textContent = file.isFile ? "📄" : file.isSymlink ? "🔗" : "";
				fileEntry.appendChild(iconSpan);

				const nameSpan = document.createElement("span");
				nameSpan.className = "name";
				nameSpan.textContent = " " + file.name;
				fileEntry.appendChild(nameSpan);
			}
			fileList.appendChild(fileEntry);
		});
	}

	// Initialize the navigation by setting the initial directory and loading it.
	(async () => {
		initialDir = await path.homeDir();
		currentWorkingDir = initialDir;
		await buildDirList(currentWorkingDir);
		updateFileListUI();
	})();

	let selectionBox = document.getElementById("selection-box");
	let startX, startY, isSelecting = false;

	// Listen for mousedown on the main element (avoid checkbox clicks)
	document.querySelector("main").addEventListener("mousedown", (e) => {
		if(e.target.closest("input.file-checkbox")) return;
		e.stopPropagation();
		e.preventDefault();
		isSelecting = true;
		startX = e.pageX;
		startY = e.pageY;
		selectionBox.style.left = startX + "px";
		selectionBox.style.top = startY + "px";
		selectionBox.style.width = "0px";
		selectionBox.style.height = "0px";
		selectionBox.style.display = "block";
	});

	document.addEventListener("mousemove", (e) => {
		if (!isSelecting) return;
		const currentX = e.pageX;
		const currentY = e.pageY;
		const rectX = Math.min(startX, currentX);
		const rectY = Math.min(startY, currentY);
		const rectWidth = Math.abs(startX - currentX);
		const rectHeight = Math.abs(startY - currentY);

		selectionBox.style.left = rectX + "px";
		selectionBox.style.top = rectY + "px";
		selectionBox.style.width = rectWidth + "px";
		selectionBox.style.height = rectHeight + "px";

		// New: mark entries intersecting with the selection box
		const selRect = selectionBox.getBoundingClientRect();
		document.querySelectorAll("#file-list li").forEach(li => {
			const liRect = li.getBoundingClientRect();
			if (rectsIntersect(liRect, selRect)) {
				li.classList.add("selecting");
			} else {
				li.classList.remove("selecting");
			}
		});
	});

	document.addEventListener("mouseup", (e) => {
		if (!isSelecting) return;
		isSelecting = false;
		selectionBox.style.display = "none";

		const fileEntries = document.querySelectorAll("#file-list li");
		fileEntries.forEach(li => {
			if (li.classList.contains("selecting")) {
				const checkbox = li.querySelector("input.file-checkbox");
				if (checkbox) {
					checkbox.checked = true;
					li.classList.add("selected");
				}
				li.classList.remove("selecting");
			}
		});
	});

	function rectsIntersect(r1, r2) {
		return !(r2.left > r1.right ||
			r2.right < r1.left ||
			r2.top > r1.bottom ||
			r2.bottom < r1.top);
	}
</script>

<style>
	#file-list {
		list-style: none;
		padding: 0;
		margin: 0;
	}
	#file-list li {
		padding: 8px;
		border-bottom: 1px solid #ccc;
		display: flex;
		align-items: center;
	}
	#file-list li:hover,
	#file-list li.selecting {
		background-color: #333; /* hovered/dragging: dark background */
	}
	#file-list li.selected {
		background-color: #007BFF; /* selected: blue background */
	}
	#file-list .icon {
		margin-right: 8px;
	}
	#selection-box {
		border: 1px dashed #666;
		background-color: rgba(173, 216, 230, 0.3);
		pointer-events: none;
		z-index: 1000;
		position: absolute;
	}
</style>
